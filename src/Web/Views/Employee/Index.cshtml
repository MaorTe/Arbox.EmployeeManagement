@using Web.ViewModels
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.Html
@functions {
    public IHtmlContent SortableHeader(
        string text,
        string column,
        EmployeeIndexViewModel m) {
        var isCurrent = string.Equals(m.SortBy, column, StringComparison.OrdinalIgnoreCase);
        var desc = isCurrent && !m.SortDescending;

        var url = Url.Action("Index", new {
            pageNumber = m.PageNumber,
            pageSize = m.PageSize,
            searchTerm = m.SearchTerm,
            departmentId = m.DepartmentId,
            sortBy = column,
            sortDescending = desc
        });

        var arrow = isCurrent
            ? (m.SortDescending ? " ↓" : " ↑")
            : "";

        var link = new TagBuilder("a");
        link.Attributes["href"] = url!;
        link.InnerHtml.Append(text + arrow);

        var th = new TagBuilder("th");
        th.InnerHtml.AppendHtml(link);
        return th;
    }
}

@model Web.ViewModels.EmployeeIndexViewModel

@{
    ViewData["Title"] = "Employees";
}

<h1>Employees</h1>

<p>
    <a asp-action="Create" class="btn btn-success">Create New Employee</a>
</p>

<table class="table">
    <thead>
        <tr>
            @SortableHeader("Id", "Id", Model)
            @SortableHeader("First Name", "FirstName", Model)
            @SortableHeader("Last Name", "LastName", Model)
            @SortableHeader("Hire Date", "HireDate", Model)
            @SortableHeader("Salary", "Salary", Model)
            @SortableHeader("Department", "Department", Model)
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var e in Model.Employees) {
            <tr>
                <td>@e.Id</td>
                <td>@e.FirstName</td>
                <td>@e.LastName</td>
                <td>@e.HireDate.ToShortDateString()</td>
                <td>@e.Salary</td>
                <td>@e.Department?.Name</td>
                <td>
                    <a asp-action="Edit" asp-route-id="@e.Id">Edit</a> |
                    <a asp-action="Delete" asp-route-id="@e.Id"
                       onclick="return confirm('Are you sure you want to delete this employee?');">
                        Delete
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var hasPrev = Model.PageNumber > 1;
    var hasNext = Model.Employees.Count() == Model.PageSize;
}

<nav>
    <ul class="pagination">
        <li class="page-item @(hasPrev ? "" : "disabled")">
            <a class="page-link"
               asp-action="Index"
               asp-route-pageNumber="@(Model.PageNumber - 1)"
               asp-route-pageSize="@(Model.PageSize)"
               asp-route-searchTerm="@(Model.SearchTerm)"
               asp-route-departmentId="@(Model.DepartmentId)"
               asp-route-sortBy="@(Model.SortBy)"
               asp-route-sortDescending="@(Model.SortDescending)">
                Previous
            </a>
        </li>
        <li class="page-item @(hasNext ? "" : "disabled")">
            <a class="page-link"
               asp-action="Index"
               asp-route-pageNumber="@(Model.PageNumber + 1)"
               asp-route-pageSize="@(Model.PageSize)"
               asp-route-searchTerm="@(Model.SearchTerm)"
               asp-route-departmentId="@(Model.DepartmentId)"
               asp-route-sortBy="@(Model.SortBy)"
               asp-route-sortDescending="@(Model.SortDescending)">
                Next
            </a>
        </li>
    </ul>
</nav>